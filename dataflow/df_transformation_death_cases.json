{
	"name": "df_transformation_death_cases",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ecdc_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "casesdeathsecdc"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup",
						"type": "DatasetReference"
					},
					"name": "lookupCountry"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_ecdc_pocessed",
						"type": "DatasetReference"
					},
					"name": "CasesandDeathSink"
				}
			],
			"transformations": [
				{
					"name": "filtereurope"
				},
				{
					"name": "selectOnlyRequiredColumns"
				},
				{
					"name": "pivotCasesandDeathsdata"
				},
				{
					"name": "JoiningMultipleDatasets"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> casesdeathsecdc",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> lookupCountry",
				"casesdeathsecdc filter(continent=='Europe' && not(isNull(country_code))) ~> filtereurope",
				"filtereurope select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               \"reported\"+\"_date\" = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOnlyRequiredColumns",
				"selectOnlyRequiredColumns pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotCasesandDeathsdata",
				"pivotCasesandDeathsdata, lookupCountry lookup(pivotCasesandDeathsdata@country == lookupCountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> JoiningMultipleDatasets",
				"JoiningMultipleDatasets select(mapColumn(",
				"          country = pivotCasesandDeathsdata@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivotCasesandDeathsdata@population,",
				"          cases_count = {confirmed cases_count},",
				"          deaths_count,",
				"          reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CasesandDeathSink"
			]
		}
	}
}